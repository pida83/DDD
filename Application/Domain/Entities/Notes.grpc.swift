//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Notes.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `NoteServiceClient`, then call methods of this protocol to make API calls.
internal protocol NoteServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: NoteServiceClientInterceptorFactoryProtocol? { get }

  func list(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Empty, NoteList>

  func get(
    _ request: NoteRequestId,
    callOptions: CallOptions?
  ) -> UnaryCall<NoteRequestId, Note>

  func insert(
    _ request: Note,
    callOptions: CallOptions?
  ) -> UnaryCall<Note, Note>

  func update(
    _ request: Note,
    callOptions: CallOptions?
  ) -> UnaryCall<Note, Note>

  func delete(
    _ request: NoteRequestId,
    callOptions: CallOptions?
  ) -> UnaryCall<NoteRequestId, Empty>
}

extension NoteServiceClientProtocol {
  internal var serviceName: String {
    return "NoteService"
  }

  /// Unary call to List
  ///
  /// - Parameters:
  ///   - request: Request to send to List.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func list(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Empty, NoteList> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  /// Unary call to Get
  ///
  /// - Parameters:
  ///   - request: Request to send to Get.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func get(
    _ request: NoteRequestId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NoteRequestId, Note> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  /// Unary call to Insert
  ///
  /// - Parameters:
  ///   - request: Request to send to Insert.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func insert(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Note, Note> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.insert.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInsertInterceptors() ?? []
    )
  }

  /// Unary call to Update
  ///
  /// - Parameters:
  ///   - request: Request to send to Update.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func update(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Note, Note> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: NoteRequestId,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<NoteRequestId, Empty> {
    return self.makeUnaryCall(
      path: NoteServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

#if compiler(>=5.6)
@available(*, deprecated)
extension NoteServiceClient: @unchecked Sendable {}
#endif // compiler(>=5.6)

@available(*, deprecated, renamed: "NoteServiceNIOClient")
internal final class NoteServiceClient: NoteServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: NoteServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the NoteService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct NoteServiceNIOClient: NoteServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the NoteService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#if compiler(>=5.6)
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol NoteServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: NoteServiceClientInterceptorFactoryProtocol? { get }

  func makeListCall(
    _ request: Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Empty, NoteList>

  func makeGetCall(
    _ request: NoteRequestId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NoteRequestId, Note>

  func makeInsertCall(
    _ request: Note,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Note, Note>

  func makeUpdateCall(
    _ request: Note,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Note, Note>

  func makeDeleteCall(
    _ request: NoteRequestId,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<NoteRequestId, Empty>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NoteServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return NoteServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeListCall(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Empty, NoteList> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  internal func makeGetCall(
    _ request: NoteRequestId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NoteRequestId, Note> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  internal func makeInsertCall(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Note, Note> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.insert.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInsertInterceptors() ?? []
    )
  }

  internal func makeUpdateCall(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Note, Note> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  internal func makeDeleteCall(
    _ request: NoteRequestId,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<NoteRequestId, Empty> {
    return self.makeAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NoteServiceAsyncClientProtocol {
  internal func list(
    _ request: Empty,
    callOptions: CallOptions? = nil
  ) async throws -> NoteList {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.list.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeListInterceptors() ?? []
    )
  }

  internal func get(
    _ request: NoteRequestId,
    callOptions: CallOptions? = nil
  ) async throws -> Note {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.get.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetInterceptors() ?? []
    )
  }

  internal func insert(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) async throws -> Note {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.insert.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeInsertInterceptors() ?? []
    )
  }

  internal func update(
    _ request: Note,
    callOptions: CallOptions? = nil
  ) async throws -> Note {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.update.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateInterceptors() ?? []
    )
  }

  internal func delete(
    _ request: NoteRequestId,
    callOptions: CallOptions? = nil
  ) async throws -> Empty {
    return try await self.performAsyncUnaryCall(
      path: NoteServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct NoteServiceAsyncClient: NoteServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: NoteServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: NoteServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

#endif // compiler(>=5.6)

internal protocol NoteServiceClientInterceptorFactoryProtocol: GRPCSendable {

  /// - Returns: Interceptors to use when invoking 'list'.
  func makeListInterceptors() -> [ClientInterceptor<Empty, NoteList>]

  /// - Returns: Interceptors to use when invoking 'get'.
  func makeGetInterceptors() -> [ClientInterceptor<NoteRequestId, Note>]

  /// - Returns: Interceptors to use when invoking 'insert'.
  func makeInsertInterceptors() -> [ClientInterceptor<Note, Note>]

  /// - Returns: Interceptors to use when invoking 'update'.
  func makeUpdateInterceptors() -> [ClientInterceptor<Note, Note>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<NoteRequestId, Empty>]
}

internal enum NoteServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NoteService",
    fullName: "NoteService",
    methods: [
      NoteServiceClientMetadata.Methods.list,
      NoteServiceClientMetadata.Methods.get,
      NoteServiceClientMetadata.Methods.insert,
      NoteServiceClientMetadata.Methods.update,
      NoteServiceClientMetadata.Methods.delete,
    ]
  )

  internal enum Methods {
    internal static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/NoteService/List",
      type: GRPCCallType.unary
    )

    internal static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/NoteService/Get",
      type: GRPCCallType.unary
    )

    internal static let insert = GRPCMethodDescriptor(
      name: "Insert",
      path: "/NoteService/Insert",
      type: GRPCCallType.unary
    )

    internal static let update = GRPCMethodDescriptor(
      name: "Update",
      path: "/NoteService/Update",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/NoteService/Delete",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol NoteServiceProvider: CallHandlerProvider {
  var interceptors: NoteServiceServerInterceptorFactoryProtocol? { get }

  func list(request: Empty, context: StatusOnlyCallContext) -> EventLoopFuture<NoteList>

  func get(request: NoteRequestId, context: StatusOnlyCallContext) -> EventLoopFuture<Note>

  func insert(request: Note, context: StatusOnlyCallContext) -> EventLoopFuture<Note>

  func update(request: Note, context: StatusOnlyCallContext) -> EventLoopFuture<Note>

  func delete(request: NoteRequestId, context: StatusOnlyCallContext) -> EventLoopFuture<Empty>
}

extension NoteServiceProvider {
  internal var serviceName: Substring {
    return NoteServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "List":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<NoteList>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        userFunction: self.list(request:context:)
      )

    case "Get":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<NoteRequestId>(),
        responseSerializer: ProtobufSerializer<Note>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        userFunction: self.get(request:context:)
      )

    case "Insert":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Note>(),
        responseSerializer: ProtobufSerializer<Note>(),
        interceptors: self.interceptors?.makeInsertInterceptors() ?? [],
        userFunction: self.insert(request:context:)
      )

    case "Update":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Note>(),
        responseSerializer: ProtobufSerializer<Note>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        userFunction: self.update(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<NoteRequestId>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    default:
      return nil
    }
  }
}

#if compiler(>=5.6)

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol NoteServiceAsyncProvider: CallHandlerProvider {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: NoteServiceServerInterceptorFactoryProtocol? { get }

  @Sendable func list(
    request: Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> NoteList

  @Sendable func get(
    request: NoteRequestId,
    context: GRPCAsyncServerCallContext
  ) async throws -> Note

  @Sendable func insert(
    request: Note,
    context: GRPCAsyncServerCallContext
  ) async throws -> Note

  @Sendable func update(
    request: Note,
    context: GRPCAsyncServerCallContext
  ) async throws -> Note

  @Sendable func delete(
    request: NoteRequestId,
    context: GRPCAsyncServerCallContext
  ) async throws -> Empty
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension NoteServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return NoteServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return NoteServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: NoteServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "List":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Empty>(),
        responseSerializer: ProtobufSerializer<NoteList>(),
        interceptors: self.interceptors?.makeListInterceptors() ?? [],
        wrapping: self.list(request:context:)
      )

    case "Get":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<NoteRequestId>(),
        responseSerializer: ProtobufSerializer<Note>(),
        interceptors: self.interceptors?.makeGetInterceptors() ?? [],
        wrapping: self.get(request:context:)
      )

    case "Insert":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Note>(),
        responseSerializer: ProtobufSerializer<Note>(),
        interceptors: self.interceptors?.makeInsertInterceptors() ?? [],
        wrapping: self.insert(request:context:)
      )

    case "Update":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Note>(),
        responseSerializer: ProtobufSerializer<Note>(),
        interceptors: self.interceptors?.makeUpdateInterceptors() ?? [],
        wrapping: self.update(request:context:)
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<NoteRequestId>(),
        responseSerializer: ProtobufSerializer<Empty>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: self.delete(request:context:)
      )

    default:
      return nil
    }
  }
}

#endif // compiler(>=5.6)

internal protocol NoteServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'list'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeListInterceptors() -> [ServerInterceptor<Empty, NoteList>]

  /// - Returns: Interceptors to use when handling 'get'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetInterceptors() -> [ServerInterceptor<NoteRequestId, Note>]

  /// - Returns: Interceptors to use when handling 'insert'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeInsertInterceptors() -> [ServerInterceptor<Note, Note>]

  /// - Returns: Interceptors to use when handling 'update'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateInterceptors() -> [ServerInterceptor<Note, Note>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<NoteRequestId, Empty>]
}

internal enum NoteServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "NoteService",
    fullName: "NoteService",
    methods: [
      NoteServiceServerMetadata.Methods.list,
      NoteServiceServerMetadata.Methods.get,
      NoteServiceServerMetadata.Methods.insert,
      NoteServiceServerMetadata.Methods.update,
      NoteServiceServerMetadata.Methods.delete,
    ]
  )

  internal enum Methods {
    internal static let list = GRPCMethodDescriptor(
      name: "List",
      path: "/NoteService/List",
      type: GRPCCallType.unary
    )

    internal static let get = GRPCMethodDescriptor(
      name: "Get",
      path: "/NoteService/Get",
      type: GRPCCallType.unary
    )

    internal static let insert = GRPCMethodDescriptor(
      name: "Insert",
      path: "/NoteService/Insert",
      type: GRPCCallType.unary
    )

    internal static let update = GRPCMethodDescriptor(
      name: "Update",
      path: "/NoteService/Update",
      type: GRPCCallType.unary
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/NoteService/Delete",
      type: GRPCCallType.unary
    )
  }
}
